//------------------------------------------------------------------------------
// <auto-generated>
//     ?????????
//     ?????:4.0.30319.42000
//
//     ???????????????????????
//     ????????????????
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace WpfDesignAndAnimationLab.Effects {
	
	public class DeepShadowEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(DeepShadowEffect), 0);
		public static readonly DependencyProperty ShadowLengthProperty = DependencyProperty.Register("ShadowLength", typeof(double), typeof(DeepShadowEffect), new UIPropertyMetadata(((double)(100D)), PixelShaderConstantCallback(0)));
		public static readonly DependencyProperty OpacityProperty = DependencyProperty.Register("Opacity", typeof(double), typeof(DeepShadowEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty WidthProperty = DependencyProperty.Register("Width", typeof(double), typeof(DeepShadowEffect), new UIPropertyMetadata(((double)(800D)), PixelShaderConstantCallback(2)));
		public static readonly DependencyProperty HeightProperty = DependencyProperty.Register("Height", typeof(double), typeof(DeepShadowEffect), new UIPropertyMetadata(((double)(600D)), PixelShaderConstantCallback(3)));
		public static readonly DependencyProperty ColorProperty = DependencyProperty.Register("Color", typeof(Color), typeof(DeepShadowEffect), new UIPropertyMetadata(Color.FromArgb(255, 0, 0, 0), PixelShaderConstantCallback(4)));
		public DeepShadowEffect() {
			PixelShader pixelShader = new PixelShader();
			pixelShader.UriSource = new Uri("/WpfDesignAndAnimationLab.Effects;component/Shaders/DeepShadowEffect.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(ShadowLengthProperty);
			this.UpdateShaderValue(OpacityProperty);
			this.UpdateShaderValue(WidthProperty);
			this.UpdateShaderValue(HeightProperty);
			this.UpdateShaderValue(ColorProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		/// <summary>ShadowLength.</summary>
		public double ShadowLength {
			get {
				return ((double)(this.GetValue(ShadowLengthProperty)));
			}
			set {
				this.SetValue(ShadowLengthProperty, value);
			}
		}
		/// <summary>Opacity.</summary>
		public double Opacity {
			get {
				return ((double)(this.GetValue(OpacityProperty)));
			}
			set {
				this.SetValue(OpacityProperty, value);
			}
		}
		/// <summary>Opacity.</summary>
		public double Width {
			get {
				return ((double)(this.GetValue(WidthProperty)));
			}
			set {
				this.SetValue(WidthProperty, value);
			}
		}
		/// <summary>Opacity.</summary>
		public double Height {
			get {
				return ((double)(this.GetValue(HeightProperty)));
			}
			set {
				this.SetValue(HeightProperty, value);
			}
		}
		/// <summary>Color.</summary>
		public Color Color {
			get {
				return ((Color)(this.GetValue(ColorProperty)));
			}
			set {
				this.SetValue(ColorProperty, value);
			}
		}
	}
}
