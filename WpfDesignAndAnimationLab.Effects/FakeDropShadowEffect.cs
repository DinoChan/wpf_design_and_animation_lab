//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace WpfDesignAndAnimationLab.Effects
{

    /// <summary>An effect that blurs in a single direction.</summary>
    public class FakeDropShadowEffect : ShaderEffect
    {
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(FakeDropShadowEffect), 0);
        public static readonly DependencyProperty AngleProperty = DependencyProperty.Register("Angle", typeof(double), typeof(FakeDropShadowEffect), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(0)));
        public static readonly DependencyProperty DepthProperty = DependencyProperty.Register("Depth", typeof(double), typeof(FakeDropShadowEffect), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(1)));
        public static readonly DependencyProperty OpacityProperty = DependencyProperty.Register("Opacity", typeof(double), typeof(FakeDropShadowEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(2)));
        public static readonly DependencyProperty ColorProperty = DependencyProperty.Register("Color", typeof(Color), typeof(FakeDropShadowEffect), new UIPropertyMetadata(Color.FromArgb(255, 0, 0, 0), PixelShaderConstantCallback(3)));
        public FakeDropShadowEffect()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("/WpfDesignAndAnimationLab.Effects;component/Shaders/FakeDropShadow.ps", UriKind.Relative);
            this.PixelShader = pixelShader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(AngleProperty);
            this.UpdateShaderValue(DepthProperty);
            this.UpdateShaderValue(OpacityProperty);
            this.UpdateShaderValue(ColorProperty);
        }
        public Brush Input
        {
            get
            {
                return ((Brush)(this.GetValue(InputProperty)));
            }
            set
            {
                this.SetValue(InputProperty, value);
            }
        }
        /// <summary>The direction of the blur (in degrees).</summary>
        public double Angle
        {
            get
            {
                return ((double)(this.GetValue(AngleProperty)));
            }
            set
            {
                this.SetValue(AngleProperty, value);
            }
        }
        public double Depth
        {
            get
            {
                return ((double)(this.GetValue(DepthProperty)));
            }
            set
            {
                this.SetValue(DepthProperty, value);
            }
        }
        /// <summary>Opacity.</summary>
        public double Opacity
        {
            get
            {
                return ((double)(this.GetValue(OpacityProperty)));
            }
            set
            {
                this.SetValue(OpacityProperty, value);
            }
        }
        /// <summary>Color.</summary>
        public Color Color
        {
            get
            {
                return ((Color)(this.GetValue(ColorProperty)));
            }
            set
            {
                this.SetValue(ColorProperty, value);
            }
        }
    }
}
